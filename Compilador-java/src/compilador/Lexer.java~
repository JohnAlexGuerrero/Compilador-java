/* The following code was generated by JFlex 1.6.0 */

package compilador;
import java.util.ArrayList;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.0
 * from the specification file <tt>C:/Users/jalexguerrero/Documents/Compilador-java/Compilador-java/src/compilador/Plantilla.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\40\1\40\1\41\1\41\1\40\22\0\1\5\1\37\2\0"+
    "\1\1\2\0\1\7\5\0\1\3\1\4\1\35\12\2\2\0\1\31"+
    "\1\6\1\32\2\0\13\1\1\33\16\1\4\0\1\1\1\0\1\23"+
    "\1\20\1\26\1\22\1\13\2\1\1\27\1\24\1\1\1\30\1\34"+
    "\1\17\1\15\1\25\1\12\1\1\1\21\1\36\1\10\1\16\2\1"+
    "\1\14\1\11\1\1\12\0\1\41\34\0\4\1\4\0\1\1\12\0"+
    "\1\1\4\0\1\1\5\0\27\1\1\0\37\1\1\0\u01ca\1\4\0"+
    "\14\1\16\0\5\1\7\0\1\1\1\0\1\1\201\0\5\1\1\0"+
    "\2\1\2\0\4\1\1\0\1\1\6\0\1\1\1\0\3\1\1\0"+
    "\1\1\1\0\24\1\1\0\123\1\1\0\213\1\10\0\246\1\1\0"+
    "\46\1\2\0\1\1\7\0\47\1\7\0\1\1\100\0\33\1\5\0"+
    "\3\1\30\0\1\1\24\0\53\1\43\0\2\1\1\0\143\1\1\0"+
    "\1\1\17\0\2\1\7\0\2\1\12\0\3\1\2\0\1\1\20\0"+
    "\1\1\1\0\36\1\35\0\131\1\13\0\1\1\30\0\41\1\11\0"+
    "\2\1\4\0\1\1\5\0\26\1\4\0\1\1\11\0\1\1\3\0"+
    "\1\1\27\0\31\1\7\0\13\1\65\0\25\1\1\0\10\1\106\0"+
    "\66\1\3\0\1\1\22\0\1\1\7\0\12\1\17\0\20\1\4\0"+
    "\10\1\2\0\2\1\2\0\26\1\1\0\7\1\1\0\1\1\3\0"+
    "\4\1\3\0\1\1\20\0\1\1\15\0\2\1\1\0\3\1\16\0"+
    "\4\1\7\0\2\1\10\0\6\1\4\0\2\1\2\0\26\1\1\0"+
    "\7\1\1\0\2\1\1\0\2\1\1\0\2\1\37\0\4\1\1\0"+
    "\1\1\23\0\3\1\20\0\11\1\1\0\3\1\1\0\26\1\1\0"+
    "\7\1\1\0\2\1\1\0\5\1\3\0\1\1\22\0\1\1\17\0"+
    "\2\1\17\0\1\1\7\0\1\1\13\0\10\1\2\0\2\1\2\0"+
    "\26\1\1\0\7\1\1\0\2\1\1\0\5\1\3\0\1\1\36\0"+
    "\2\1\1\0\3\1\17\0\1\1\21\0\1\1\1\0\6\1\3\0"+
    "\3\1\1\0\4\1\3\0\2\1\1\0\1\1\1\0\2\1\3\0"+
    "\2\1\3\0\3\1\3\0\14\1\26\0\1\1\50\0\1\1\13\0"+
    "\10\1\1\0\3\1\1\0\27\1\1\0\20\1\3\0\1\1\32\0"+
    "\3\1\5\0\2\1\36\0\1\1\4\0\10\1\1\0\3\1\1\0"+
    "\27\1\1\0\12\1\1\0\5\1\3\0\1\1\40\0\1\1\1\0"+
    "\2\1\17\0\2\1\22\0\10\1\1\0\3\1\1\0\51\1\2\0"+
    "\1\1\20\0\1\1\5\0\3\1\10\0\3\1\30\0\6\1\5\0"+
    "\22\1\3\0\30\1\1\0\11\1\1\0\1\1\2\0\7\1\72\0"+
    "\60\1\1\0\2\1\13\0\10\1\72\0\2\1\1\0\1\1\2\0"+
    "\2\1\1\0\1\1\2\0\1\1\6\0\4\1\1\0\7\1\1\0"+
    "\3\1\1\0\1\1\1\0\1\1\2\0\2\1\1\0\4\1\1\0"+
    "\2\1\11\0\1\1\2\0\5\1\1\0\1\1\25\0\4\1\40\0"+
    "\1\1\77\0\10\1\1\0\44\1\33\0\5\1\163\0\53\1\24\0"+
    "\1\1\20\0\6\1\4\0\4\1\3\0\1\1\3\0\2\1\7\0"+
    "\3\1\4\0\15\1\14\0\1\1\21\0\46\1\1\0\1\1\5\0"+
    "\1\1\2\0\53\1\1\0\u014d\1\1\0\4\1\2\0\7\1\1\0"+
    "\1\1\1\0\4\1\2\0\51\1\1\0\4\1\2\0\41\1\1\0"+
    "\4\1\2\0\7\1\1\0\1\1\1\0\4\1\2\0\17\1\1\0"+
    "\71\1\1\0\4\1\2\0\103\1\45\0\20\1\20\0\126\1\2\0"+
    "\6\1\3\0\u026c\1\2\0\21\1\1\0\32\1\5\0\113\1\3\0"+
    "\13\1\7\0\15\1\1\0\4\1\16\0\22\1\16\0\22\1\16\0"+
    "\15\1\1\0\3\1\17\0\64\1\43\0\1\1\3\0\2\1\103\0"+
    "\130\1\10\0\5\1\2\0\42\1\1\0\1\1\5\0\106\1\12\0"+
    "\37\1\61\0\36\1\2\0\5\1\13\0\54\1\4\0\32\1\66\0"+
    "\27\1\11\0\65\1\122\0\1\1\135\0\57\1\21\0\7\1\67\0"+
    "\36\1\15\0\2\1\12\0\54\1\32\0\44\1\51\0\3\1\12\0"+
    "\44\1\2\0\11\1\140\0\4\1\1\0\4\1\3\0\2\1\11\0"+
    "\300\1\100\0\u0116\1\2\0\6\1\2\0\46\1\2\0\6\1\2\0"+
    "\10\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0\37\1\2\0"+
    "\65\1\1\0\7\1\1\0\1\1\3\0\3\1\1\0\7\1\3\0"+
    "\4\1\2\0\6\1\4\0\15\1\5\0\3\1\1\0\7\1\53\0"+
    "\1\41\1\41\25\0\2\1\23\0\1\1\34\0\1\1\15\0\1\1"+
    "\20\0\15\1\3\0\40\1\102\0\1\1\4\0\1\1\2\0\12\1"+
    "\1\0\1\1\3\0\5\1\6\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\4\1\1\0\13\1\2\0\4\1\5\0\5\1\4\0\1\1"+
    "\21\0\51\1\u0a77\0\57\1\1\0\57\1\1\0\205\1\6\0\4\1"+
    "\3\0\2\1\14\0\46\1\1\0\1\1\5\0\1\1\2\0\70\1"+
    "\7\0\1\1\20\0\27\1\11\0\7\1\1\0\7\1\1\0\7\1"+
    "\1\0\7\1\1\0\7\1\1\0\7\1\1\0\7\1\1\0\7\1"+
    "\120\0\1\1\u01d5\0\3\1\31\0\11\1\7\0\5\1\2\0\5\1"+
    "\4\0\126\1\6\0\3\1\1\0\132\1\1\0\4\1\5\0\52\1"+
    "\2\0\136\1\21\0\33\1\65\0\20\1\u0200\0\u19b6\1\112\0\u51eb\1"+
    "\25\0\u048d\1\103\0\56\1\2\0\u010d\1\3\0\20\1\12\0\2\1"+
    "\24\0\57\1\20\0\37\1\2\0\120\1\47\0\11\1\2\0\147\1"+
    "\2\0\44\1\1\0\10\1\77\0\13\1\1\0\3\1\1\0\4\1"+
    "\1\0\27\1\25\0\1\1\7\0\64\1\16\0\62\1\76\0\6\1"+
    "\3\0\1\1\1\0\1\1\14\0\34\1\12\0\27\1\31\0\35\1"+
    "\7\0\57\1\34\0\1\1\20\0\5\1\1\0\12\1\12\0\5\1"+
    "\1\0\51\1\27\0\3\1\1\0\10\1\24\0\27\1\3\0\1\1"+
    "\3\0\62\1\1\0\1\1\3\0\2\1\2\0\5\1\2\0\1\1"+
    "\1\0\1\1\30\0\3\1\2\0\13\1\7\0\3\1\14\0\6\1"+
    "\2\0\6\1\2\0\6\1\11\0\7\1\1\0\7\1\1\0\53\1"+
    "\1\0\12\1\12\0\163\1\35\0\u2ba4\1\14\0\27\1\4\0\61\1"+
    "\u2104\0\u016e\1\2\0\152\1\46\0\7\1\14\0\5\1\5\0\1\1"+
    "\1\0\12\1\1\0\15\1\1\0\5\1\1\0\1\1\1\0\2\1"+
    "\1\0\2\1\1\0\154\1\41\0\u016b\1\22\0\100\1\2\0\66\1"+
    "\50\0\15\1\66\0\2\1\30\0\3\1\31\0\1\1\6\0\5\1"+
    "\1\0\207\1\7\0\1\1\34\0\32\1\4\0\1\1\1\0\32\1"+
    "\13\0\131\1\3\0\6\1\2\0\6\1\2\0\6\1\2\0\3\1"+
    "\3\0\2\1\3\0\2\1\31\0\14\1\1\0\32\1\1\0\23\1"+
    "\1\0\2\1\1\0\17\1\2\0\16\1\42\0\173\1\105\0\65\1"+
    "\u010b\0\35\1\3\0\61\1\57\0\40\1\15\0\36\1\5\0\46\1"+
    "\12\0\36\1\2\0\44\1\4\0\10\1\1\0\5\1\52\0\236\1"+
    "\22\0\44\1\4\0\44\1\4\0\50\1\10\0\64\1\234\0\u0137\1"+
    "\11\0\26\1\12\0\10\1\230\0\6\1\2\0\1\1\1\0\54\1"+
    "\1\0\2\1\3\0\1\1\2\0\27\1\12\0\27\1\11\0\37\1"+
    "\101\0\23\1\1\0\2\1\12\0\26\1\12\0\32\1\106\0\70\1"+
    "\6\0\2\1\100\0\1\1\17\0\4\1\1\0\3\1\1\0\33\1"+
    "\54\0\35\1\3\0\35\1\43\0\10\1\1\0\34\1\33\0\66\1"+
    "\12\0\26\1\12\0\23\1\15\0\22\1\156\0\111\1\67\0\63\1"+
    "\15\0\63\1\u0310\0\65\1\113\0\55\1\40\0\31\1\32\0\44\1"+
    "\51\0\43\1\3\0\1\1\14\0\60\1\16\0\4\1\25\0\1\1"+
    "\1\0\1\1\43\0\22\1\1\0\31\1\124\0\7\1\1\0\1\1"+
    "\1\0\4\1\1\0\17\1\1\0\12\1\7\0\57\1\46\0\10\1"+
    "\2\0\2\1\2\0\26\1\1\0\7\1\1\0\2\1\1\0\5\1"+
    "\3\0\1\1\22\0\1\1\14\0\5\1\236\0\65\1\22\0\4\1"+
    "\65\0\60\1\24\0\2\1\1\0\1\1\270\0\57\1\51\0\4\1"+
    "\44\0\60\1\24\0\1\1\73\0\53\1\125\0\32\1\u0186\0\100\1"+
    "\37\0\1\1\u0100\0\1\1\12\0\50\1\7\0\1\1\25\0\1\1"+
    "\13\0\50\1\2\0\4\1\66\0\71\1\u0107\0\11\1\1\0\45\1"+
    "\21\0\1\1\61\0\36\1\160\0\7\1\1\0\2\1\1\0\46\1"+
    "\25\0\1\1\u02b9\0\u039a\1\146\0\157\1\21\0\304\1\u0abc\0\u042f\1"+
    "\u0fd1\0\u0247\1\u21b9\0\u0239\1\7\0\37\1\161\0\36\1\22\0\60\1"+
    "\20\0\4\1\37\0\25\1\5\0\23\1\u0370\0\105\1\13\0\1\1"+
    "\102\0\15\1\100\0\2\1\36\0\u17ed\1\23\0\u02f3\1\u250d\0\u011f\1"+
    "\121\0\u018c\1\u0904\0\153\1\5\0\15\1\3\0\11\1\7\0\12\1"+
    "\u1766\0\125\1\1\0\107\1\1\0\2\1\2\0\1\1\2\0\2\1"+
    "\2\0\4\1\1\0\14\1\1\0\1\1\1\0\7\1\1\0\101\1"+
    "\1\0\4\1\2\0\10\1\1\0\7\1\1\0\34\1\1\0\4\1"+
    "\1\0\5\1\1\0\1\1\3\0\7\1\1\0\u0154\1\2\0\31\1"+
    "\1\0\31\1\1\0\37\1\1\0\31\1\1\0\37\1\1\0\31\1"+
    "\1\0\37\1\1\0\31\1\1\0\37\1\1\0\31\1\1\0\10\1"+
    "\u1034\0\305\1\73\0\104\1\u04bc\0\4\1\1\0\33\1\1\0\2\1"+
    "\1\0\1\1\2\0\1\1\1\0\12\1\1\0\4\1\1\0\1\1"+
    "\1\0\1\1\6\0\1\1\4\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\3\1\1\0\2\1\1\0\1\1\2\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\2\1\1\0\1\1"+
    "\2\0\4\1\1\0\7\1\1\0\4\1\1\0\4\1\1\0\1\1"+
    "\1\0\12\1\1\0\21\1\5\0\3\1\1\0\5\1\1\0\21\1"+
    "\u1144\0\ua6d7\1\51\0\u1035\1\13\0\336\1\2\0\u1682\1\16\0\u1d31\1"+
    "\u0c1f\0\u021e\1\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05f0\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\6\1\24\0\1\3\2\0\1\4"+
    "\7\0\1\5\6\0\1\6\23\0\1\7\7\0\1\10"+
    "\200\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[204];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\42\0\42\0\104\0\146\0\210\0\252\0\314"+
    "\0\356\0\u0110\0\u0132\0\u0154\0\u0176\0\u0198\0\u01ba\0\u01dc"+
    "\0\u01fe\0\u0220\0\u0242\0\u0264\0\u0286\0\u02a8\0\u02ca\0\u02ec"+
    "\0\u030e\0\u0330\0\u0352\0\u0374\0\u0396\0\42\0\u03b8\0\u03da"+
    "\0\42\0\u03fc\0\u041e\0\u0440\0\u0462\0\u0484\0\u04a6\0\u04c8"+
    "\0\42\0\u04ea\0\u050c\0\u052e\0\u0550\0\u0572\0\u0594\0\42"+
    "\0\u05b6\0\u05d8\0\u05fa\0\u061c\0\u063e\0\u0660\0\u0682\0\u06a4"+
    "\0\u06c6\0\u06e8\0\u070a\0\u072c\0\u074e\0\u0770\0\u0792\0\u07b4"+
    "\0\u07d6\0\u07f8\0\u081a\0\42\0\u083c\0\u085e\0\u0880\0\u08a2"+
    "\0\u08c4\0\u08e6\0\u0908\0\42\0\u092a\0\u094c\0\u096e\0\u0990"+
    "\0\u09b2\0\u09d4\0\u09f6\0\u0a18\0\u0a3a\0\u0a5c\0\u0a7e\0\u0aa0"+
    "\0\u0ac2\0\u0ae4\0\u0b06\0\u0b28\0\u0b4a\0\u0b6c\0\u0b8e\0\u0bb0"+
    "\0\u0bd2\0\u0bf4\0\u0c16\0\u0c38\0\u0c5a\0\u0c7c\0\u0c9e\0\u0cc0"+
    "\0\u0ce2\0\u0d04\0\u0d26\0\u0d48\0\u0d6a\0\u0d8c\0\u0dae\0\u0dd0"+
    "\0\u0df2\0\u0e14\0\u0e36\0\u0e58\0\u0e7a\0\u0e9c\0\u0ebe\0\u0ee0"+
    "\0\u0f02\0\u0f24\0\u0f46\0\u0f68\0\u0f8a\0\u0fac\0\u0fce\0\u0ff0"+
    "\0\u1012\0\u1034\0\u1056\0\u1078\0\u109a\0\u10bc\0\u10de\0\u1100"+
    "\0\u1122\0\u1144\0\u1166\0\u1188\0\u11aa\0\u11cc\0\u11ee\0\u1210"+
    "\0\u1232\0\u1254\0\u1276\0\u1298\0\u12ba\0\u12dc\0\u12fe\0\u1320"+
    "\0\u1342\0\u1364\0\u1386\0\u13a8\0\u13ca\0\u13ec\0\u140e\0\u1430"+
    "\0\u1452\0\u1474\0\u1496\0\u14b8\0\u14da\0\u14fc\0\u151e\0\u1540"+
    "\0\u1562\0\u1584\0\u15a6\0\u15c8\0\u15ea\0\u160c\0\u162e\0\u1650"+
    "\0\u1672\0\u1694\0\u16b6\0\u16d8\0\u16fa\0\u171c\0\u173e\0\u1760"+
    "\0\u1782\0\u17a4\0\u17c6\0\u17e8\0\u180a\0\u182c\0\u184e\0\u1870"+
    "\0\u1892\0\u18b4\0\u18d6\0\u18f8\0\u191a\0\u193c\0\u195e\0\u1980"+
    "\0\u19a2\0\u19c4\0\u19e6\0\u1a08";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[204];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\5\2\1\3\2\2\1\4\4\2\1\5\3\2\1\6"+
    "\1\7\3\2\1\10\2\2\1\11\6\2\1\3\56\0"+
    "\1\12\44\0\1\13\46\0\1\14\41\0\1\15\45\0"+
    "\1\16\36\0\1\17\1\20\5\0\1\21\2\0\1\22"+
    "\1\23\16\0\1\24\44\0\1\25\44\0\1\26\27\0"+
    "\1\27\44\0\1\30\43\0\1\31\36\0\1\32\52\0"+
    "\1\33\31\0\1\34\31\0\1\35\46\0\1\36\51\0"+
    "\1\37\45\0\1\40\30\0\1\41\54\0\1\42\25\0"+
    "\1\43\37\0\1\44\51\0\1\45\55\0\1\46\10\0"+
    "\1\47\51\0\1\50\53\0\1\51\44\0\1\52\27\0"+
    "\1\53\47\0\1\54\30\0\1\55\41\0\1\56\27\0"+
    "\1\57\6\0\21\57\2\0\2\57\1\0\1\57\24\0"+
    "\1\60\40\0\1\61\31\0\1\62\56\0\1\63\50\0"+
    "\1\64\33\0\1\65\14\0\1\57\1\66\1\67\1\0"+
    "\1\70\2\0\21\57\2\0\2\57\1\0\1\57\30\0"+
    "\1\71\21\0\1\72\51\0\1\73\31\0\1\74\24\0"+
    "\1\75\17\0\1\76\33\0\1\66\1\77\1\100\1\70"+
    "\36\0\1\101\1\102\37\0\1\57\1\66\1\103\4\0"+
    "\21\57\2\0\2\57\1\0\1\57\17\0\1\104\35\0"+
    "\1\105\63\0\1\106\10\0\1\107\6\0\21\107\2\0"+
    "\2\107\1\0\1\107\4\0\1\110\6\0\21\110\2\0"+
    "\2\110\1\0\1\110\10\0\1\111\24\0\1\112\12\0"+
    "\1\102\40\0\1\113\41\0\1\101\1\0\1\100\67\0"+
    "\1\114\11\0\1\101\50\0\1\115\31\0\1\116\6\0"+
    "\21\116\2\0\2\116\1\0\1\116\4\0\1\107\1\117"+
    "\1\120\2\0\1\121\1\0\21\107\2\0\2\107\1\0"+
    "\1\107\4\0\1\110\1\122\1\123\1\0\1\124\2\0"+
    "\21\110\1\125\1\0\2\110\1\0\1\110\4\0\1\126"+
    "\6\0\21\126\2\0\2\126\1\0\1\126\34\0\1\127"+
    "\12\0\1\113\1\77\1\0\1\70\46\0\1\130\30\0"+
    "\1\116\1\131\1\132\1\0\1\133\2\0\21\116\1\134"+
    "\1\0\2\116\1\0\1\116\5\0\1\117\1\0\1\135"+
    "\1\0\1\121\35\0\1\136\46\0\1\137\34\0\1\122"+
    "\1\0\1\140\1\124\23\0\1\125\12\0\1\141\40\0"+
    "\1\110\1\122\1\123\4\0\21\110\2\0\2\110\1\0"+
    "\1\110\40\0\1\142\5\0\1\126\1\143\1\144\2\0"+
    "\1\145\1\0\21\126\2\0\2\126\1\0\1\126\30\0"+
    "\1\146\27\0\1\147\30\0\1\131\1\0\1\150\1\133"+
    "\23\0\1\134\12\0\1\151\40\0\1\116\1\131\1\132"+
    "\4\0\21\116\2\0\2\116\1\0\1\116\40\0\1\152"+
    "\6\0\1\153\41\0\1\136\1\0\1\135\36\0\1\154"+
    "\1\155\1\156\4\0\21\154\2\0\2\154\1\0\1\154"+
    "\5\0\1\157\41\0\1\141\1\0\1\140\70\0\1\160"+
    "\10\0\1\143\1\0\1\161\1\0\1\145\35\0\1\162"+
    "\46\0\1\163\44\0\1\164\35\0\1\165\35\0\1\166"+
    "\41\0\1\151\1\0\1\150\62\0\1\167\16\0\1\153"+
    "\3\0\1\121\34\0\1\154\1\155\1\156\3\0\1\64"+
    "\21\154\2\0\2\154\1\0\1\154\5\0\1\155\1\0"+
    "\1\170\2\0\1\64\34\0\1\171\41\0\1\157\2\0"+
    "\1\124\23\0\1\125\33\0\1\172\20\0\1\173\41\0"+
    "\1\162\1\0\1\161\36\0\1\174\1\175\1\176\4\0"+
    "\21\174\2\0\2\174\1\0\1\174\13\0\1\177\40\0"+
    "\1\200\34\0\1\166\2\0\1\133\23\0\1\134\22\0"+
    "\1\201\31\0\1\202\41\0\1\171\1\0\1\170\55\0"+
    "\1\203\23\0\1\173\3\0\1\145\34\0\1\174\1\175"+
    "\1\176\3\0\1\76\21\174\2\0\2\174\1\0\1\174"+
    "\5\0\1\175\1\0\1\204\2\0\1\76\34\0\1\205"+
    "\63\0\1\206\25\0\1\207\4\0\1\210\3\0\1\211"+
    "\1\212\3\0\1\213\23\0\1\214\33\0\1\202\4\0"+
    "\1\64\45\0\1\215\30\0\1\216\41\0\1\205\1\0"+
    "\1\204\62\0\1\217\27\0\1\220\44\0\1\221\46\0"+
    "\1\222\41\0\1\223\45\0\1\224\36\0\1\225\51\0"+
    "\1\102\7\0\1\216\4\0\1\76\47\0\1\226\40\0"+
    "\1\227\44\0\1\230\44\0\1\231\27\0\1\232\44\0"+
    "\1\233\53\0\1\234\46\0\1\235\17\0\1\236\51\0"+
    "\1\237\45\0\1\240\30\0\1\236\54\0\1\241\30\0"+
    "\1\102\25\0\1\242\6\0\21\242\2\0\2\242\1\0"+
    "\1\242\12\0\1\243\45\0\1\244\53\0\1\236\44\0"+
    "\1\245\12\0\1\242\1\246\1\247\1\0\1\250\2\0"+
    "\21\242\1\251\1\0\2\242\1\0\1\242\10\0\1\252"+
    "\24\0\1\114\30\0\1\236\40\0\1\253\23\0\1\246"+
    "\1\0\1\254\1\250\23\0\1\251\12\0\1\255\40\0"+
    "\1\242\1\246\1\247\4\0\21\242\2\0\2\242\1\0"+
    "\1\242\40\0\1\256\5\0\1\257\6\0\21\257\2\0"+
    "\2\257\1\0\1\257\30\0\1\260\16\0\1\261\41\0"+
    "\1\255\1\0\1\254\62\0\1\262\15\0\1\257\1\263"+
    "\1\264\2\0\1\265\1\0\21\257\2\0\2\257\1\0"+
    "\1\257\17\0\1\236\27\0\1\261\2\0\1\250\23\0"+
    "\1\251\22\0\1\266\31\0\1\263\1\0\1\267\1\0"+
    "\1\265\35\0\1\270\46\0\1\271\42\0\1\272\33\0"+
    "\1\273\41\0\1\270\1\0\1\267\36\0\1\274\1\275"+
    "\1\276\4\0\21\274\2\0\2\274\1\0\1\274\27\0"+
    "\1\277\17\0\1\273\3\0\1\265\34\0\1\274\1\275"+
    "\1\276\3\0\1\243\21\274\2\0\2\274\1\0\1\274"+
    "\5\0\1\275\1\0\1\300\2\0\1\243\34\0\1\301"+
    "\64\0\1\302\16\0\1\303\41\0\1\301\1\0\1\300"+
    "\52\0\1\304\26\0\1\303\4\0\1\243\64\0\1\305"+
    "\40\0\1\306\35\0\1\146\7\0\1\307\42\0\1\310"+
    "\16\0\1\311\62\0\1\312\20\0\1\313\54\0\1\314"+
    "\23\0\1\102\31\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6698];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\6\1\24\0\1\11\2\0\1\11\7\0"+
    "\1\11\6\0\1\11\23\0\1\11\7\0\1\11\200\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[204];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public ArrayList<Token> ts = new ArrayList<Token>();
    public String errlex="";


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2554) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;           
    int totalRead = 0;
    while (totalRead < requested) {
      int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);
      if (numRead == -1) {
        break;
      }
      totalRead += numRead;
    }

    if (totalRead > 0) {
      zzEndRead += totalRead;
      if (totalRead == requested) { /* possibly more input available */
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      return false;
    }

    // totalRead = 0: End of stream
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Yytoken yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { errlex += ("\nError: Símbolo no válido: " + yytext() + " En la linea: " + (yyline+1) + " columna: " + (yycolumn+1)  );
          }
        case 9: break;
        case 2: 
          { 
          }
        case 10: break;
        case 3: 
          { ts.add(new Token("input type Text",yytext()));
          }
        case 11: break;
        case 4: 
          { ts.add(new Token("input type Date",yytext()));
          }
        case 12: break;
        case 5: 
          { ts.add(new Token("button of option",yytext()));
          }
        case 13: break;
        case 6: 
          { ts.add(new Token("input type Number",yytext()));
          }
        case 14: break;
        case 7: 
          { ts.add(new Token("button check",yytext()));
          }
        case 15: break;
        case 8: 
          { ts.add(new Token("Tag",yytext()));
          }
        case 16: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}

/* The following code was generated by JFlex 1.6.0 */

package compilador;
import java.util.ArrayList;
//import java_cup.runtime.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.0
 * from the specification file <tt>C:/Users/jalex/Documents/Compilador-java/Compilador-java/src/compilador/Plantilla.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\41\1\41\1\42\1\42\1\41\22\0\1\5\1\40\2\0"+
    "\1\1\2\0\1\7\5\0\1\3\1\4\1\27\12\2\2\0\1\10"+
    "\1\6\1\24\2\0\13\1\1\35\16\1\4\0\1\1\1\0\1\21"+
    "\1\33\1\31\1\22\1\17\1\26\1\1\1\25\1\11\1\1\1\32"+
    "\1\36\1\34\1\12\1\23\1\13\1\1\1\20\1\37\1\15\1\14"+
    "\2\1\1\30\1\16\1\1\12\0\1\42\34\0\4\1\4\0\1\1"+
    "\12\0\1\1\4\0\1\1\5\0\27\1\1\0\37\1\1\0\u01ca\1"+
    "\4\0\14\1\16\0\5\1\7\0\1\1\1\0\1\1\201\0\5\1"+
    "\1\0\2\1\2\0\4\1\1\0\1\1\6\0\1\1\1\0\3\1"+
    "\1\0\1\1\1\0\24\1\1\0\123\1\1\0\213\1\10\0\246\1"+
    "\1\0\46\1\2\0\1\1\6\0\51\1\6\0\1\1\100\0\33\1"+
    "\4\0\4\1\30\0\1\1\24\0\53\1\43\0\2\1\1\0\143\1"+
    "\1\0\1\1\17\0\2\1\7\0\2\1\12\0\3\1\2\0\1\1"+
    "\20\0\1\1\1\0\36\1\35\0\131\1\13\0\1\1\30\0\41\1"+
    "\11\0\2\1\4\0\1\1\3\0\30\1\4\0\1\1\11\0\1\1"+
    "\3\0\1\1\27\0\31\1\7\0\13\1\65\0\25\1\1\0\10\1"+
    "\106\0\66\1\3\0\1\1\22\0\1\1\7\0\12\1\17\0\20\1"+
    "\4\0\10\1\2\0\2\1\2\0\26\1\1\0\7\1\1\0\1\1"+
    "\3\0\4\1\3\0\1\1\20\0\1\1\15\0\2\1\1\0\3\1"+
    "\16\0\4\1\7\0\2\1\10\0\6\1\4\0\2\1\2\0\26\1"+
    "\1\0\7\1\1\0\2\1\1\0\2\1\1\0\2\1\37\0\4\1"+
    "\1\0\1\1\23\0\3\1\20\0\11\1\1\0\3\1\1\0\26\1"+
    "\1\0\7\1\1\0\2\1\1\0\5\1\3\0\1\1\22\0\1\1"+
    "\17\0\2\1\17\0\1\1\7\0\1\1\13\0\10\1\2\0\2\1"+
    "\2\0\26\1\1\0\7\1\1\0\2\1\1\0\5\1\3\0\1\1"+
    "\36\0\2\1\1\0\3\1\17\0\1\1\21\0\1\1\1\0\6\1"+
    "\3\0\3\1\1\0\4\1\3\0\2\1\1\0\1\1\1\0\2\1"+
    "\3\0\2\1\3\0\3\1\3\0\14\1\26\0\1\1\50\0\1\1"+
    "\13\0\10\1\1\0\3\1\1\0\27\1\1\0\20\1\3\0\1\1"+
    "\32\0\3\1\5\0\2\1\36\0\1\1\4\0\10\1\1\0\3\1"+
    "\1\0\27\1\1\0\12\1\1\0\5\1\3\0\1\1\40\0\1\1"+
    "\1\0\2\1\17\0\2\1\22\0\10\1\1\0\3\1\1\0\51\1"+
    "\2\0\1\1\20\0\1\1\5\0\3\1\10\0\3\1\30\0\6\1"+
    "\5\0\22\1\3\0\30\1\1\0\11\1\1\0\1\1\2\0\7\1"+
    "\72\0\60\1\1\0\2\1\13\0\10\1\72\0\2\1\1\0\1\1"+
    "\1\0\5\1\1\0\30\1\1\0\1\1\1\0\12\1\1\0\2\1"+
    "\11\0\1\1\2\0\5\1\1\0\1\1\25\0\4\1\40\0\1\1"+
    "\77\0\10\1\1\0\44\1\33\0\5\1\163\0\53\1\24\0\1\1"+
    "\20\0\6\1\4\0\4\1\3\0\1\1\3\0\2\1\7\0\3\1"+
    "\4\0\15\1\14\0\1\1\21\0\46\1\1\0\1\1\5\0\1\1"+
    "\2\0\53\1\1\0\u014d\1\1\0\4\1\2\0\7\1\1\0\1\1"+
    "\1\0\4\1\2\0\51\1\1\0\4\1\2\0\41\1\1\0\4\1"+
    "\2\0\7\1\1\0\1\1\1\0\4\1\2\0\17\1\1\0\71\1"+
    "\1\0\4\1\2\0\103\1\45\0\20\1\20\0\126\1\2\0\6\1"+
    "\3\0\u026c\1\2\0\21\1\1\0\32\1\5\0\113\1\3\0\13\1"+
    "\7\0\15\1\1\0\4\1\16\0\22\1\16\0\22\1\16\0\15\1"+
    "\1\0\3\1\17\0\64\1\43\0\1\1\3\0\2\1\103\0\131\1"+
    "\7\0\5\1\2\0\42\1\1\0\1\1\5\0\106\1\12\0\37\1"+
    "\61\0\36\1\2\0\5\1\13\0\54\1\4\0\32\1\66\0\27\1"+
    "\11\0\65\1\122\0\1\1\135\0\57\1\21\0\7\1\67\0\36\1"+
    "\15\0\2\1\12\0\54\1\32\0\44\1\51\0\3\1\12\0\44\1"+
    "\2\0\11\1\7\0\53\1\2\0\3\1\51\0\4\1\1\0\6\1"+
    "\1\0\2\1\3\0\1\1\5\0\300\1\100\0\u0116\1\2\0\6\1"+
    "\2\0\46\1\2\0\6\1\2\0\10\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\37\1\2\0\65\1\1\0\7\1\1\0\1\1"+
    "\3\0\3\1\1\0\7\1\3\0\4\1\2\0\6\1\4\0\15\1"+
    "\5\0\3\1\1\0\7\1\53\0\1\42\1\42\25\0\2\1\23\0"+
    "\1\1\34\0\1\1\15\0\1\1\20\0\15\1\3\0\40\1\102\0"+
    "\1\1\4\0\1\1\2\0\12\1\1\0\1\1\3\0\5\1\6\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\4\1\1\0\13\1\2\0"+
    "\4\1\5\0\5\1\4\0\1\1\21\0\51\1\u0a77\0\57\1\1\0"+
    "\57\1\1\0\205\1\6\0\4\1\3\0\2\1\14\0\46\1\1\0"+
    "\1\1\5\0\1\1\2\0\70\1\7\0\1\1\20\0\27\1\11\0"+
    "\7\1\1\0\7\1\1\0\7\1\1\0\7\1\1\0\7\1\1\0"+
    "\7\1\1\0\7\1\1\0\7\1\120\0\1\1\u01d5\0\3\1\31\0"+
    "\11\1\7\0\5\1\2\0\5\1\4\0\126\1\6\0\3\1\1\0"+
    "\132\1\1\0\4\1\5\0\53\1\1\0\136\1\21\0\33\1\65\0"+
    "\20\1\u0200\0\u19b6\1\112\0\u51f0\1\20\0\u048d\1\103\0\56\1\2\0"+
    "\u010d\1\3\0\20\1\12\0\2\1\24\0\57\1\20\0\37\1\2\0"+
    "\120\1\47\0\11\1\2\0\147\1\2\0\65\1\2\0\5\1\60\0"+
    "\13\1\1\0\3\1\1\0\4\1\1\0\27\1\25\0\1\1\7\0"+
    "\64\1\16\0\62\1\76\0\6\1\3\0\1\1\1\0\2\1\13\0"+
    "\34\1\12\0\27\1\31\0\35\1\7\0\57\1\34\0\1\1\20\0"+
    "\5\1\1\0\12\1\12\0\5\1\1\0\51\1\27\0\3\1\1\0"+
    "\10\1\24\0\27\1\3\0\1\1\3\0\62\1\1\0\1\1\3\0"+
    "\2\1\2\0\5\1\2\0\1\1\1\0\1\1\30\0\3\1\2\0"+
    "\13\1\7\0\3\1\14\0\6\1\2\0\6\1\2\0\6\1\11\0"+
    "\7\1\1\0\7\1\1\0\53\1\1\0\14\1\10\0\163\1\35\0"+
    "\u2ba4\1\14\0\27\1\4\0\61\1\u2104\0\u016e\1\2\0\152\1\46\0"+
    "\7\1\14\0\5\1\5\0\1\1\1\0\12\1\1\0\15\1\1\0"+
    "\5\1\1\0\1\1\1\0\2\1\1\0\2\1\1\0\154\1\41\0"+
    "\u016b\1\22\0\100\1\2\0\66\1\50\0\15\1\66\0\2\1\30\0"+
    "\3\1\31\0\1\1\6\0\5\1\1\0\207\1\7\0\1\1\34\0"+
    "\32\1\4\0\1\1\1\0\32\1\13\0\131\1\3\0\6\1\2\0"+
    "\6\1\2\0\6\1\2\0\3\1\3\0\2\1\3\0\2\1\31\0"+
    "\14\1\1\0\32\1\1\0\23\1\1\0\2\1\1\0\17\1\2\0"+
    "\16\1\42\0\173\1\105\0\65\1\u010b\0\35\1\3\0\61\1\57\0"+
    "\40\1\15\0\36\1\5\0\46\1\12\0\36\1\2\0\44\1\4\0"+
    "\10\1\1\0\5\1\52\0\236\1\22\0\44\1\4\0\44\1\4\0"+
    "\50\1\10\0\64\1\234\0\u0137\1\11\0\26\1\12\0\10\1\230\0"+
    "\6\1\2\0\1\1\1\0\54\1\1\0\2\1\3\0\1\1\2\0"+
    "\27\1\12\0\27\1\11\0\37\1\101\0\23\1\1\0\2\1\12\0"+
    "\26\1\12\0\32\1\106\0\70\1\6\0\2\1\100\0\1\1\17\0"+
    "\4\1\1\0\3\1\1\0\35\1\52\0\35\1\3\0\35\1\43\0"+
    "\10\1\1\0\34\1\33\0\66\1\12\0\26\1\12\0\23\1\15\0"+
    "\22\1\156\0\111\1\67\0\63\1\15\0\63\1\15\0\44\1\u01dc\0"+
    "\35\1\12\0\1\1\10\0\26\1\232\0\27\1\14\0\65\1\113\0"+
    "\55\1\40\0\31\1\32\0\44\1\35\0\1\1\13\0\43\1\3\0"+
    "\1\1\14\0\60\1\16\0\4\1\25\0\1\1\1\0\1\1\43\0"+
    "\22\1\1\0\31\1\124\0\7\1\1\0\1\1\1\0\4\1\1\0"+
    "\17\1\1\0\12\1\7\0\57\1\46\0\10\1\2\0\2\1\2\0"+
    "\26\1\1\0\7\1\1\0\2\1\1\0\5\1\3\0\1\1\22\0"+
    "\1\1\14\0\5\1\236\0\65\1\22\0\4\1\24\0\1\1\40\0"+
    "\60\1\24\0\2\1\1\0\1\1\270\0\57\1\51\0\4\1\44\0"+
    "\60\1\24\0\1\1\73\0\53\1\15\0\1\1\107\0\33\1\345\0"+
    "\54\1\164\0\100\1\37\0\1\1\240\0\10\1\2\0\47\1\20\0"+
    "\1\1\1\0\1\1\34\0\1\1\12\0\50\1\7\0\1\1\25\0"+
    "\1\1\13\0\56\1\23\0\1\1\42\0\71\1\u0107\0\11\1\1\0"+
    "\45\1\21\0\1\1\61\0\36\1\160\0\7\1\1\0\2\1\1\0"+
    "\46\1\25\0\1\1\31\0\6\1\1\0\2\1\1\0\40\1\16\0"+
    "\1\1\u0147\0\23\1\352\0\4\1\37\0\u039a\1\146\0\157\1\21\0"+
    "\304\1\u0abc\0\u042f\1\u0fd1\0\u0247\1\u21b9\0\u0239\1\7\0\37\1\161\0"+
    "\36\1\22\0\60\1\20\0\4\1\37\0\25\1\5\0\23\1\u02b0\0"+
    "\100\1\200\0\113\1\5\0\1\1\102\0\15\1\100\0\2\1\1\0"+
    "\1\1\34\0\u17f8\1\10\0\u02f3\1\u250d\0\u011f\1\61\0\3\1\21\0"+
    "\4\1\10\0\u018c\1\u0904\0\153\1\5\0\15\1\3\0\11\1\7\0"+
    "\12\1\u1766\0\125\1\1\0\107\1\1\0\2\1\2\0\1\1\2\0"+
    "\2\1\2\0\4\1\1\0\14\1\1\0\1\1\1\0\7\1\1\0"+
    "\101\1\1\0\4\1\2\0\10\1\1\0\7\1\1\0\34\1\1\0"+
    "\4\1\1\0\5\1\1\0\1\1\3\0\7\1\1\0\u0154\1\2\0"+
    "\31\1\1\0\31\1\1\0\37\1\1\0\31\1\1\0\37\1\1\0"+
    "\31\1\1\0\37\1\1\0\31\1\1\0\37\1\1\0\31\1\1\0"+
    "\10\1\u0934\0\55\1\12\0\7\1\20\0\1\1\u0171\0\54\1\23\0"+
    "\1\1\u0500\0\305\1\73\0\104\1\7\0\1\1\u0364\0\1\1\u014f\0"+
    "\4\1\1\0\33\1\1\0\2\1\1\0\1\1\2\0\1\1\1\0"+
    "\12\1\1\0\4\1\1\0\1\1\1\0\1\1\6\0\1\1\4\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\3\1\1\0\2\1\1\0"+
    "\1\1\2\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\2\1\1\0\1\1\2\0\4\1\1\0\7\1\1\0"+
    "\4\1\1\0\4\1\1\0\1\1\1\0\12\1\1\0\21\1\5\0"+
    "\3\1\1\0\5\1\1\0\21\1\u1144\0\ua6d7\1\51\0\u1035\1\13\0"+
    "\336\1\2\0\u1682\1\16\0\u1d31\1\u0c1f\0\u021e\1\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05f0\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\54\0\1\3\136\0\1\4"+
    "\6\0\1\5\11\0\1\6\2\0\1\7\10\0\1\10"+
    "\6\0\1\11\45\0\1\12\63\0\1\13";

  private static int [] zzUnpackAction() {
    int [] result = new int[270];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\43\0\43\0\106\0\151\0\214\0\257\0\322"+
    "\0\365\0\u0118\0\u013b\0\u015e\0\u0181\0\u01a4\0\u01c7\0\u01ea"+
    "\0\u020d\0\u0230\0\u0253\0\u0276\0\u0299\0\u02bc\0\u02df\0\u0302"+
    "\0\u0325\0\u0348\0\u036b\0\u038e\0\u03b1\0\u03d4\0\u03f7\0\u041a"+
    "\0\u043d\0\u0460\0\u0483\0\u04a6\0\u04c9\0\u04ec\0\u050f\0\u0532"+
    "\0\u0555\0\u0578\0\u059b\0\u05be\0\u05e1\0\u0604\0\u0627\0\u064a"+
    "\0\43\0\u066d\0\u0690\0\u06b3\0\u06d6\0\u06f9\0\u071c\0\u073f"+
    "\0\u0762\0\u0785\0\u07a8\0\u07cb\0\u07ee\0\u0811\0\u0834\0\u0857"+
    "\0\u087a\0\u089d\0\u08c0\0\u08e3\0\u0906\0\u0929\0\u094c\0\u096f"+
    "\0\u0992\0\u09b5\0\u09d8\0\u09fb\0\u0a1e\0\u0a41\0\u0a64\0\u0a87"+
    "\0\u0aaa\0\u0acd\0\u0af0\0\u0b13\0\u0b36\0\u0b59\0\u0b7c\0\u0b9f"+
    "\0\u0bc2\0\u0be5\0\u0c08\0\u0c2b\0\u0c4e\0\u0c71\0\u0c94\0\u0cb7"+
    "\0\u0cda\0\u0cfd\0\u0d20\0\u0d43\0\u0d66\0\u0d89\0\u0dac\0\u0dcf"+
    "\0\u0df2\0\u0e15\0\u0e38\0\u0e5b\0\u0e7e\0\u0ea1\0\u0ec4\0\u0ee7"+
    "\0\u0f0a\0\u0f2d\0\u0f50\0\u0f73\0\u0f96\0\u0fb9\0\u0fdc\0\u0fff"+
    "\0\u1022\0\u1045\0\u1068\0\u108b\0\u10ae\0\u10d1\0\u10f4\0\u1117"+
    "\0\u113a\0\u115d\0\u1180\0\u11a3\0\u11c6\0\u11e9\0\u120c\0\u122f"+
    "\0\u1252\0\u1275\0\u1298\0\u12bb\0\u12de\0\u1301\0\u1324\0\43"+
    "\0\u1347\0\u136a\0\u138d\0\u13b0\0\u13d3\0\u13f6\0\43\0\u1419"+
    "\0\u143c\0\u145f\0\u1482\0\u14a5\0\u14c8\0\u14eb\0\u150e\0\u1531"+
    "\0\43\0\u1554\0\u1577\0\43\0\u159a\0\u15bd\0\u15e0\0\u1603"+
    "\0\u1626\0\u1649\0\u166c\0\u168f\0\43\0\u16b2\0\u16d5\0\u16f8"+
    "\0\u171b\0\u173e\0\u1761\0\43\0\u1784\0\u17a7\0\u17ca\0\u17ed"+
    "\0\u1810\0\u1833\0\u1856\0\u1879\0\u189c\0\u18bf\0\u18e2\0\u1905"+
    "\0\u1928\0\u194b\0\u196e\0\u1991\0\u19b4\0\u19d7\0\u19fa\0\u1a1d"+
    "\0\u1a40\0\u1a63\0\u1a86\0\u1aa9\0\u1acc\0\u1aef\0\u1b12\0\u1b35"+
    "\0\u1b58\0\u1b7b\0\u1b9e\0\u1bc1\0\u1be4\0\u1c07\0\u1c2a\0\u1c4d"+
    "\0\u1c70\0\43\0\u1c93\0\u1cb6\0\u1cd9\0\u1cfc\0\u1d1f\0\u1d42"+
    "\0\u1d65\0\u1d88\0\u1dab\0\u1dce\0\u1df1\0\u1e14\0\u1e37\0\u1e5a"+
    "\0\u1e7d\0\u1ea0\0\u1ec3\0\u1ee6\0\u1f09\0\u1f2c\0\u1f4f\0\u1f72"+
    "\0\u1f95\0\u1fb8\0\u1fdb\0\u1ffe\0\u2021\0\u2044\0\u2067\0\u208a"+
    "\0\u20ad\0\u20d0\0\u20f3\0\u2116\0\u2139\0\u215c\0\u217f\0\u21a2"+
    "\0\u21c5\0\u21e8\0\u220b\0\u222e\0\u2251\0\u2274\0\u2297\0\u22ba"+
    "\0\u22dd\0\u2300\0\u2323\0\u2346\0\u2369\0\43";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[270];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\5\2\1\3\2\2\1\4\30\2\1\3\55\0\1\5"+
    "\7\0\1\6\13\0\1\7\1\0\1\10\1\11\14\0"+
    "\1\12\35\0\1\13\56\0\1\14\40\0\1\15\26\0"+
    "\1\16\52\0\1\17\54\0\1\20\50\0\1\21\45\0"+
    "\1\22\7\0\1\23\53\0\1\24\46\0\1\25\41\0"+
    "\1\26\42\0\1\27\24\0\1\30\3\0\1\31\3\0"+
    "\13\30\1\0\2\30\1\0\10\30\20\0\1\32\44\0"+
    "\1\33\61\0\1\34\35\0\1\35\12\0\1\30\1\36"+
    "\1\37\1\0\1\40\3\0\13\30\1\0\2\30\1\0"+
    "\10\30\4\0\1\30\7\0\13\30\1\0\2\30\1\0"+
    "\10\30\10\0\1\41\63\0\1\42\21\0\1\43\16\0"+
    "\1\44\33\0\1\45\27\0\1\36\1\46\1\47\1\40"+
    "\37\0\1\50\1\51\40\0\1\30\1\36\1\37\5\0"+
    "\13\30\1\0\2\30\1\0\10\30\20\0\1\52\33\0"+
    "\1\53\35\0\1\54\7\0\13\54\1\0\2\54\1\0"+
    "\10\54\4\0\1\55\7\0\13\55\1\0\2\55\1\0"+
    "\10\55\10\0\1\56\16\0\1\57\21\0\1\51\41\0"+
    "\1\60\42\0\1\50\1\0\1\47\62\0\1\61\34\0"+
    "\1\62\33\0\1\63\34\0\1\54\1\64\1\65\2\0"+
    "\1\66\2\0\13\54\1\0\2\54\1\0\10\54\4\0"+
    "\1\55\1\67\1\70\1\0\1\71\2\0\1\72\13\55"+
    "\1\0\2\55\1\0\10\55\4\0\1\73\7\0\13\73"+
    "\1\0\2\73\1\0\10\73\10\0\1\74\33\0\1\74"+
    "\3\0\1\60\1\46\1\0\1\40\50\0\1\75\30\0"+
    "\1\76\7\0\13\76\1\0\2\76\1\0\10\76\5\0"+
    "\1\64\1\0\1\77\1\0\1\66\36\0\1\100\47\0"+
    "\1\101\35\0\1\67\1\0\1\102\1\71\2\0\1\72"+
    "\34\0\1\103\41\0\1\55\1\67\1\70\5\0\13\55"+
    "\1\0\2\55\1\0\10\55\32\0\1\104\14\0\1\73"+
    "\1\105\1\106\2\0\1\107\2\0\13\73\1\0\2\73"+
    "\1\0\10\73\13\0\1\110\51\0\1\111\24\0\1\76"+
    "\1\112\1\113\3\0\1\114\1\0\13\76\1\0\2\76"+
    "\1\0\10\76\5\0\1\115\42\0\1\100\1\0\1\77"+
    "\37\0\1\116\1\117\1\120\5\0\13\116\1\0\2\116"+
    "\1\0\10\116\5\0\1\121\42\0\1\103\1\0\1\102"+
    "\73\0\1\122\7\0\1\105\1\0\1\123\1\0\1\107"+
    "\36\0\1\124\47\0\1\125\56\0\1\126\25\0\1\127"+
    "\36\0\1\112\1\0\1\130\2\0\1\114\35\0\1\131"+
    "\45\0\1\132\16\0\1\133\20\0\1\115\3\0\1\66"+
    "\35\0\1\116\1\117\1\120\3\0\1\34\1\0\13\116"+
    "\1\0\2\116\1\0\10\116\5\0\1\117\1\0\1\134"+
    "\2\0\1\34\35\0\1\135\42\0\1\121\2\0\1\71"+
    "\2\0\1\72\53\0\1\136\23\0\1\137\42\0\1\124"+
    "\1\0\1\123\37\0\1\140\1\141\1\142\5\0\13\140"+
    "\1\0\2\140\1\0\10\140\16\0\1\143\36\0\1\144"+
    "\35\0\1\145\42\0\1\131\1\0\1\130\37\0\1\146"+
    "\7\0\13\146\1\133\2\146\1\0\10\146\4\0\1\147"+
    "\7\0\13\147\1\0\2\147\1\0\10\147\5\0\1\150"+
    "\42\0\1\135\1\0\1\134\71\0\1\151\11\0\1\137"+
    "\3\0\1\107\35\0\1\140\1\141\1\142\3\0\1\45"+
    "\1\0\13\140\1\0\2\140\1\0\10\140\5\0\1\141"+
    "\1\0\1\152\2\0\1\45\35\0\1\153\55\0\1\154"+
    "\37\0\1\155\2\0\1\156\2\0\1\157\1\0\1\160"+
    "\6\0\1\161\13\0\1\145\4\0\1\114\34\0\1\146"+
    "\1\162\1\163\2\0\1\164\2\0\13\146\1\0\2\146"+
    "\1\0\10\146\4\0\1\147\1\165\1\166\4\0\1\167"+
    "\13\147\1\0\2\147\1\0\10\147\5\0\1\150\4\0"+
    "\1\34\52\0\1\170\25\0\1\171\42\0\1\153\1\0"+
    "\1\152\47\0\1\172\45\0\1\173\45\0\1\174\44\0"+
    "\1\175\42\0\1\176\46\0\1\177\17\0\1\162\1\0"+
    "\1\200\1\0\1\164\36\0\1\201\47\0\1\202\35\0"+
    "\1\165\1\0\1\203\3\0\1\167\34\0\1\204\67\0"+
    "\1\205\51\0\1\206\6\0\1\171\4\0\1\45\56\0"+
    "\1\207\53\0\1\210\36\0\1\211\34\0\1\212\35\0"+
    "\1\213\44\0\1\214\25\0\1\215\42\0\1\201\1\0"+
    "\1\200\37\0\1\76\1\112\1\113\5\0\13\76\1\0"+
    "\2\76\1\0\10\76\5\0\1\216\42\0\1\204\1\0"+
    "\1\203\57\0\1\217\45\0\1\220\30\0\1\221\63\0"+
    "\1\222\24\0\1\223\36\0\1\224\50\0\1\225\54\0"+
    "\1\226\13\0\1\215\3\0\1\164\36\0\1\216\5\0"+
    "\1\167\56\0\1\227\42\0\1\230\35\0\1\231\32\0"+
    "\1\232\56\0\1\233\26\0\1\234\65\0\1\235\11\0"+
    "\1\236\7\0\13\236\1\0\2\236\1\0\10\236\23\0"+
    "\1\237\27\0\1\240\16\0\1\241\25\0\1\242\40\0"+
    "\1\243\16\0\1\244\51\0\1\245\10\0\1\236\1\246"+
    "\1\247\1\0\1\250\2\0\1\251\13\236\1\0\2\236"+
    "\1\0\10\236\12\0\1\252\34\0\1\253\7\0\13\253"+
    "\1\241\2\253\1\0\10\253\10\0\1\254\16\0\1\255"+
    "\17\0\1\256\7\0\13\256\1\244\2\256\1\0\10\256"+
    "\26\0\1\257\21\0\1\246\1\0\1\260\1\250\2\0"+
    "\1\251\34\0\1\261\41\0\1\236\1\246\1\247\5\0"+
    "\13\236\1\0\2\236\1\0\10\236\32\0\1\262\20\0"+
    "\1\263\16\0\1\264\17\0\1\253\1\265\1\266\2\0"+
    "\1\267\2\0\13\253\1\0\2\253\1\0\10\253\4\0"+
    "\1\270\7\0\13\270\1\255\2\270\1\0\10\270\4\0"+
    "\1\256\1\271\1\272\2\0\1\273\2\0\13\256\1\0"+
    "\2\256\1\0\10\256\33\0\1\274\14\0\1\275\42\0"+
    "\1\261\1\0\1\260\61\0\1\276\20\0\1\277\7\0"+
    "\13\277\1\264\2\277\1\0\10\277\5\0\1\265\1\0"+
    "\1\300\1\0\1\267\36\0\1\301\47\0\1\302\34\0"+
    "\1\270\1\303\1\304\2\0\1\305\2\0\13\270\1\0"+
    "\2\270\1\0\10\270\5\0\1\271\1\0\1\306\1\0"+
    "\1\273\36\0\1\307\47\0\1\310\42\0\1\311\35\0"+
    "\1\275\2\0\1\250\2\0\1\251\45\0\1\312\30\0"+
    "\1\277\1\313\1\314\2\0\1\315\2\0\13\277\1\0"+
    "\2\277\1\0\10\277\5\0\1\316\42\0\1\301\1\0"+
    "\1\300\37\0\1\317\1\320\1\321\5\0\13\317\1\0"+
    "\2\317\1\0\10\317\5\0\1\303\1\0\1\322\1\0"+
    "\1\305\36\0\1\323\47\0\1\324\35\0\1\325\42\0"+
    "\1\307\1\0\1\306\37\0\1\326\1\327\1\330\5\0"+
    "\13\326\1\0\2\326\1\0\10\326\10\0\1\331\16\0"+
    "\1\332\33\0\1\333\27\0\1\313\1\0\1\334\1\0"+
    "\1\315\36\0\1\335\47\0\1\336\35\0\1\316\3\0"+
    "\1\267\35\0\1\317\1\320\1\321\3\0\1\232\1\0"+
    "\13\317\1\0\2\317\1\0\10\317\5\0\1\320\1\0"+
    "\1\337\2\0\1\232\35\0\1\340\42\0\1\341\42\0"+
    "\1\323\1\0\1\322\37\0\1\342\1\343\1\344\5\0"+
    "\13\342\1\0\2\342\1\0\10\342\5\0\1\325\3\0"+
    "\1\273\35\0\1\326\1\327\1\330\3\0\1\234\1\0"+
    "\13\326\1\0\2\326\1\0\10\326\5\0\1\327\1\0"+
    "\1\345\2\0\1\234\35\0\1\346\41\0\1\347\7\0"+
    "\13\347\1\332\2\347\1\0\10\347\14\0\1\350\33\0"+
    "\1\351\42\0\1\335\1\0\1\334\37\0\1\352\1\353"+
    "\1\354\5\0\13\352\1\0\2\352\1\0\10\352\5\0"+
    "\1\355\42\0\1\340\1\0\1\337\40\0\1\341\3\0"+
    "\1\305\35\0\1\342\1\343\1\344\3\0\1\242\1\0"+
    "\13\342\1\0\2\342\1\0\10\342\5\0\1\343\1\0"+
    "\1\356\2\0\1\242\35\0\1\357\42\0\1\360\42\0"+
    "\1\346\1\0\1\345\37\0\1\347\1\361\1\362\2\0"+
    "\1\363\2\0\13\347\1\0\2\347\1\0\10\347\26\0"+
    "\1\364\21\0\1\351\3\0\1\315\35\0\1\352\1\353"+
    "\1\354\3\0\1\252\1\0\13\352\1\0\2\352\1\0"+
    "\10\352\5\0\1\353\1\0\1\365\2\0\1\252\35\0"+
    "\1\366\42\0\1\355\4\0\1\232\35\0\1\367\42\0"+
    "\1\357\1\0\1\356\40\0\1\360\4\0\1\234\35\0"+
    "\1\361\1\0\1\370\1\0\1\363\36\0\1\371\47\0"+
    "\1\372\45\0\1\373\32\0\1\374\42\0\1\366\1\0"+
    "\1\365\40\0\1\367\4\0\1\242\35\0\1\375\42\0"+
    "\1\371\1\0\1\370\37\0\1\376\1\377\1\u0100\5\0"+
    "\13\376\1\0\2\376\1\0\10\376\27\0\1\u0101\20\0"+
    "\1\374\4\0\1\252\35\0\1\375\3\0\1\363\35\0"+
    "\1\376\1\377\1\u0100\3\0\1\311\1\0\13\376\1\0"+
    "\2\376\1\0\10\376\5\0\1\377\1\0\1\u0102\2\0"+
    "\1\311\35\0\1\u0103\45\0\1\u0104\33\0\1\u0104\3\0"+
    "\1\u0105\42\0\1\u0103\1\0\1\u0102\46\0\1\u0106\34\0"+
    "\1\u0105\4\0\1\311\56\0\1\126\3\0\1\u0107\52\0"+
    "\1\u0108\22\0\1\u0109\61\0\1\u010a\23\0\1\u010b\54\0"+
    "\1\u010c\26\0\1\u010d\51\0\1\u010e\16\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9100];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\1\1\54\0\1\11\136\0\1\11\6\0"+
    "\1\11\11\0\1\11\2\0\1\11\10\0\1\11\6\0"+
    "\1\11\45\0\1\11\63\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[270];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public ArrayList<Token> ts = new ArrayList<Token>();
    public String errlex="";
    /**private Symbol symbol (int type){
        return new Symbol(type, yyline, yycolum);
    }**/


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2664) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;           
    int totalRead = 0;
    while (totalRead < requested) {
      int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);
      if (numRead == -1) {
        break;
      }
      totalRead += numRead;
    }

    if (totalRead > 0) {
      zzEndRead += totalRead;
      if (totalRead == requested) { /* possibly more input available */
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      return false;
    }

    // totalRead = 0: End of stream
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Yytoken yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { errlex += ("\nError: Símbolo no válido: " + yytext() + " En la linea: " + (yyline+1) + " columna: " + (yycolumn+1)  );
          }
        case 12: break;
        case 2: 
          { 
          }
        case 13: break;
        case 3: 
          { ts.add(new Token("COMMENTARY",yytext()));
          }
        case 14: break;
        case 4: 
          { ts.add(new Token("TEXT",yytext()));
          }
        case 15: break;
        case 5: 
          { ts.add(new Token("BUTTON",yytext()));
          }
        case 16: break;
        case 6: 
          { ts.add(new Token("TEXT TYPED",yytext()));
          }
        case 17: break;
        case 7: 
          { ts.add(new Token("DATE",yytext()));
          }
        case 18: break;
        case 8: 
          { ts.add(new Token("BUTTON OF OPTION",yytext()));
          }
        case 19: break;
        case 9: 
          { ts.add(new Token("NUMBER",yytext()));
          }
        case 20: break;
        case 10: 
          { ts.add(new Token("BUTTON CHECK",yytext()));
          }
        case 21: break;
        case 11: 
          { ts.add(new Token("LIST",yytext()));
          }
        case 22: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
